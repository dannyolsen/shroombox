SHROOMBOX FRONTEND ALPINE.JS FIX

When the frontend fails to update setpoints and interact with buttons, follow these steps:

1. PROBLEM:
   - Alpine.js binding issues with input fields
   - Frontend getting stuck on loading screen
   - Can't update setpoints or interact with elements
   - Input values don't change when edited
   - In Safari, the loading indicator never completes

2. COMPREHENSIVE SOLUTION:
   - Add x-cloak directive to main Alpine component
   - Add :value binding to all input fields
   - Keep @input with $el.value for binding user input
   - Use setTimeout to set input values in loadSetpoints()
   - Use consistent ID-based approach for error handling
   - Simplify DOM manipulation code
   - Add Safari-specific detection and workarounds

3. SPECIFIC CHANGES:

   A. Add x-cloak to prevent FOUC (Flash of Uninitialized Content):
      ```html
      <div x-data="controlPanel()" x-init="init()" x-cloak class="max-w-6xl mx-auto space-y-6">
      ```
      
   B. Add CSS for x-cloak:
      ```css
      [x-cloak] { display: none !important; }
      ```

   C. For each input element, ensure both value binding and input event handling:
      ```html
      <input 
          id="temperature-setpoint"
          type="number" 
          class="block w-24 rounded-md border border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 p-2"
          step="0.1"
          min="0"
          max="40"
          :value="setpoints.temperature"
          @input="setpoints.temperature = parseFloat($el.value)"
          @change="updateSetpoint('temperature')"
      >
      ```

   D. In the loadSetpoints() function, replace direct DOM updates with a timeout-wrapped approach:
      ```javascript
      // Set input values directly - make a direct DOM update
      setTimeout(() => {
          try {
              const tempInput = document.getElementById('temperature-setpoint');
              const co2Input = document.getElementById('co2-setpoint');
              const humidityInput = document.getElementById('humidity-setpoint');
              
              if (tempInput) tempInput.value = this.setpoints.temperature;
              if (co2Input) co2Input.value = this.setpoints.co2;
              if (humidityInput) humidityInput.value = this.setpoints.humidity;
              
              debugLog('Input values set directly in DOM');
          } catch (err) {
              debugLog(`Error setting input values: ${err.message}`, 'error');
          }
      }, 200);
      ```

   E. Simplify and standardize the updateSetpoint() function with consistent ID naming:
      ```javascript
      // Get the input element by ID - use consistent pattern
      let inputId = `${type}-setpoint`;
      if (type === 'temperature') {
          inputId = 'temperature-setpoint';
      }
      
      const inputElement = document.getElementById(inputId);
      const currentValue = this.setpoints[type];
      ```

   F. Add proper feedback with unique IDs for each input:
      ```javascript
      // Simplify the feedback - use a single approach
      const feedbackDiv = document.createElement('div');
      feedbackDiv.className = 'mt-2 text-xs text-blue-600';
      feedbackDiv.textContent = 'Saving...';
      feedbackDiv.id = `${type}-feedback`;
      
      // Remove any existing feedback
      const existingFeedback = document.getElementById(`${type}-feedback`);
      if (existingFeedback && existingFeedback.parentNode) {
          existingFeedback.parentNode.removeChild(existingFeedback);
      }
      ```

   G. Safari-specific fixes:
      ```javascript
      // Detect Safari
      const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
      
      // Special Safari handling for EventSource
      if (isSafari) {
          // Use periodic AJAX instead of EventSource for logs
          this.safariLogInterval = setInterval(async () => {
              try {
                  const response = await fetch('/api/logs/latest?count=10');
                  if (response.ok) {
                      const logs = await response.json();
                      // Process logs...
                  }
              } catch (err) {
                  console.error("Error fetching logs:", err);
              }
          }, 5000);
          
          // Force page load completion
          setTimeout(function() {
              document.body.classList.add('safari-browser');
              window.dispatchEvent(new Event('load'));
          }, 2000);
      }
      ```

4. WHY THIS WORKS:
   - Two-way binding with both :value and @input ensures Alpine.js updates both ways
   - x-cloak prevents UI flashing/inconsistency during initialization
   - setTimeout prevents race conditions with Alpine.js initialization
   - Consistent ID handling improves reliability of DOM manipulation
   - Feedback elements with unique IDs prevent DOM conflicts
   - Safari-specific handling prevents the page from staying in "loading" state
   - Replacing EventSource with AJAX polling allows Safari to properly complete page loading

5. AFTER FIX:
   - Restart the web service: sudo systemctl restart shroombox-web.service
   - Clear browser cache or use incognito mode to test
   - Try changing setpoint values and verify they save correctly
   - Ensure all buttons are responsive
   - For Safari users: verify the loading indicator completes and page is fully interactive

SAFARI-SPECIFIC TROUBLESHOOTING:
- If Safari still shows the loading indicator, try adding this bookmark and clicking it while on the page:
  javascript:void(window.stop())
- Try the simple UI (/simple) in Safari if the main UI still has issues
- Check Safari's Develop menu > Web Inspector > Console for any errors
- Disable browser extensions that might interfere with page loading

GENERAL TROUBLESHOOTING:
- If a particular input still doesn't work, check the browser console for errors
- Verify the input IDs match exactly what's in the code
- Check that Alpine.js is fully initialized before interacting with elements
- For persistent issues, try a hard refresh (Ctrl+F5) or incognito window

Remember: If you make any changes to the Alpine.js code structure in the future, you may need to revisit these fixes to ensure compatibility. 