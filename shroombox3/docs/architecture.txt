# Technical Architecture

## System Components
1. Core Controller (main.py)
   - Main event loop
   - System coordination
   - Error handling
   - Resource management

2. Hardware Modules
   - Fan Controller (noctua_pwm.py)
     - PWM signal generation
     - CPU temperature monitoring
     - Speed control algorithms
   
   - Sensor Interface (scd30_interface.py)
     - I2C communication
     - Measurement scheduling
     - Data validation
   
   - Humidifier Control (humidifier.py)
     - Network communication
     - Burst timing
     - State management

3. Control Systems
   - PID Controllers
     - CO2 control loop
     - Humidity control loop
     - Auto-tuning capabilities

4. Data Layer
   - InfluxDB Interface
     - Time-series storage
     - Metrics aggregation
     - Event logging

5. Web Interface
   - Flask Backend
     - REST API
     - WebSocket updates
     - Configuration management
   
   - Frontend
     - Real-time updates
     - Interactive controls
     - Mobile responsiveness

## Data Flow
1. Sensor Reading → Data Validation → Storage
2. Measurements → PID Controllers → Hardware Control
3. User Input → Configuration → Control Parameters
4. Events → Logging → Dashboard Updates

## Communication Protocols
1. Hardware
   - I2C: SCD30 sensor
   - PWM: Fan control
   - GPIO: Digital control
   
2. Network
   - HTTP/REST: Web interface
   - WebSocket: Real-time updates
   - TCP/IP: Smart plug control

## Error Handling
1. Hardware Failures
   - Sensor timeout handling
   - Device reconnection logic
   - Failsafe modes

2. Network Issues
   - Connection retry logic
   - Offline operation modes
   - State recovery

3. System Errors
   - Graceful degradation
   - Auto-recovery
   - Error logging 